class UiSubtitle extends Object
	dependson( GfxSubtitle, Subtitle )
	implements( GAMEIUI );

///////////////////////////////////////////////////////////////////////////////
// = PreProcessor Directives =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Constants =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Properties =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Fields =
///////////////////////////////////////////////////////////////////////////////

var private GSSubtitle m_currentlyPlayingSubtitle;

var private GSGfxSubtitle m_gfxSubtitle;


///////////////////////////////////////////////////////////////////////////////
// = Delegates =
///////////////////////////////////////////////////////////////////////////////

delegate OnSubtitlePlayingStarted( string id );
delegate OnSubtitlePlayingInterrupted( string id );
delegate OnSubtitlePlayingFinished( string id );


///////////////////////////////////////////////////////////////////////////////
// = Forward Declerations =
///////////////////////////////////////////////////////////////////////////////

private function OnGfxSubTitleRaised( string _id, string _text )
{
}

private function OnGfxSubTitleTimedOut( string _id, string _text )
{
}

private function OnGfxSubtitlePlayingStarted( string _id )
{
	if( OnSubtitlePlayingStarted != none )
		OnSubtitlePlayingStarted( _id );
}

private function OnGfxSubtitlePlayingInterrupted( string _id )
{
	if( OnSubtitlePlayingInterrupted != none )
		OnSubtitlePlayingInterrupted( _id );

	if ( m_currentlyPlayingSubtitle.ID == _id )
		m_currentlyPlayingSubtitle = none;
}

private function OnGfxSubtitlePlayingFinished( string _id )
{
	if( OnSubtitlePlayingFinished != none )
		OnSubtitlePlayingFinished( _id );

	if ( m_currentlyPlayingSubtitle.ID == _id )
		m_currentlyPlayingSubtitle = none;
}


///////////////////////////////////////////////////////////////////////////////
// = Event Handlers =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Public Methods =
///////////////////////////////////////////////////////////////////////////////

public function Initialize()
{
	m_gfxSubtitle = GSGfxSubtitle( class'GSGfxMoviePlayer'.static.Create( class'GSGfxSubtitle' ) );
	m_gfxSubtitle.OnSubTitleRaised = OnGfxSubTitleRaised;
	m_gfxSubtitle.OnSubTitleTimedOut = OnGfxSubTitleTimedOut;
	m_gfxSubtitle.OnSubtitlePlayingStarted = OnGfxSubtitlePlayingStarted;
	m_gfxSubtitle.OnSubtitlePlayingInterrupted = OnGfxSubtitlePlayingInterrupted;
	m_gfxSubtitle.OnSubtitlePlayingFinished = OnGfxSubtitlePlayingFinished;
}

public function Hide()
{
	if (Visible())
		m_gfxSubtitle.Hide();
}

public function Show()
{
	if (!Visible())
		m_gfxSubtitle.Show( false );
}

public function bool Visible()
{
	return m_gfxSubtitle.Visible();
}

public function PlaySubtitle( GSSubtitle _subtitle )
{
	Hide();
	m_gfxSubtitle.AS_Clear();
	m_gfxSubtitle.AS_FillSubtitlesData( _subtitle.ID, _subtitle.Data.DeltaTimes, _subtitle.Data.Dialogs );
	Show();
	m_currentlyPlayingSubtitle = _subtitle;
	m_gfxSubtitle.AS_PlaySubtitles();
}


///////////////////////////////////////////////////////////////////////////////
// = Protected Methods =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Private Methods =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Interface Implementation =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Base Class Overrides =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = Debug Methods =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// = State Definitions =
///////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Default Values
///////////////////////////////////////////////////////////////////////////////

DefaultProperties
{
}

